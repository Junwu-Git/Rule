name: Sync and Modify IP Lists

on:
  schedule:
    - cron: "30 22 * * *" # 6:30 AM UTC+8
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-lists:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout your repository
        uses: actions/checkout@v3

      - name: Set current date
        run: echo "DATE=$(date '+%Y年%m月%d日')" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git curl

      - name: Clone source repositories
        run: |
          git clone --branch meta https://github.com/MetaCubeX/meta-rules-dat.git --depth=1
          git clone --branch master https://github.com/blackmatrix7/ios_rule_script.git --depth=1
          git clone --branch main https://github.com/666OS/YYDS.git yyds-repo --depth=1

      - name: Prepare folders
        run: mkdir -p ActionRules ActionRules/copy meta/MetaCubeX/geoip meta/MetaCubeX/geosite meta/666OS meta/blackmatrix7

      - name: Initialize warning files
        run: |
          echo "同步警告记录：" > warning.md
          echo "" > new_warning.md

      - name: Copy classical geoip IP list (with ,no-resolve)
        run: |
          for f in private google netflix telegram twitter; do
            src="meta-rules-dat/geo/geoip/classical/${f}.list"
            dst="ActionRules/${f}_ip.list"
            if [[ -f "$src" ]]; then
              awk '{ if ($0 ~ /^#/) print $0; else print $0",no-resolve" }' "$src" > "$dst"
            else
              echo "${{ env.DATE }}，${f}.list，未拷贝" >> warning.md
              echo "${f}.list，未拷贝" >> new_warning.md
            fi
          done

      - name: Convert YAML rules from 666OS/YYDS to list format
        run: |
          for f in XPTV download fix-direct; do
            src="yyds-repo/mihomo/rules/${f}.yaml"
            dst="ActionRules/${f}.list"
            if [[ -f "$src" ]]; then
              grep -vE '^(payload:|[[:space:]]*# PROCESS-NAME|[[:space:]]*- PROCESS-NAME|^$)' "$src" \
                | sed -E 's/^[[:space:]]*-[[:space:]]*//' \
                | sed 's/^[[:space:]]*#/#/' > "$dst"
            else
              echo "${{ env.DATE }}，${f}.yaml，未拷贝" >> warning.md
              echo "${f}.yaml，未拷贝" >> new_warning.md
            fi
          done

      - name: Copy geosite list files
        run: |
          cd meta-rules-dat/geo/geosite/classical
          for f in category-public-tracker private connectivity-check cn openai category-ai-!cn github twitter youtube apple-cn apple cloudflare-cn google onedrive microsoft category-games telegram netflix bilibili bahamut spotify pixiv gfw geolocation-!cn; do
            f_lc="${f,,}.list"
            if compgen -G "$f_lc" > /dev/null; then
              cp "$f_lc" ../../../../ActionRules/copy/
            else
              echo "${{ env.DATE }}，${f_lc}，未拷贝" >> ../../../../warning.md
              echo "${f_lc}，未拷贝" >> ../../../../new_warning.md
            fi
          done
          cd ../../../../

      - name: Copy geoip cn.list as cn_ip.list
        run: |
          if [[ -f meta-rules-dat/geo/geoip/classical/cn.list ]]; then
            cp meta-rules-dat/geo/geoip/classical/cn.list ActionRules/copy/cn_ip.list
          else
            echo "${{ env.DATE }}，cn.list，未拷贝" >> warning.md
            echo "cn.list，未拷贝" >> new_warning.md
          fi

      - name: Copy emby.list from YYDS
        run: |
          if [[ -f yyds-repo/mihomo/rules/emby.list ]]; then
            cp yyds-repo/mihomo/rules/emby.list ActionRules/copy/emby.list
          else
            echo "${{ env.DATE }}，emby.list，未拷贝" >> warning.md
            echo "emby.list，未拷贝" >> new_warning.md
          fi

      - name: Copy Game.list from blackmatrix7
        run: |
          if [[ -f ios_rule_script/rule/Loon/Game/Game.list ]]; then
            cp ios_rule_script/rule/Loon/Game/Game.list ActionRules/copy/Game.list
          else
            echo "${{ env.DATE }}，Game.list，未拷贝" >> warning.md
            echo "Game.list，未拷贝" >> new_warning.md
          fi

      - name: Copy mrs from MetaCubeX geoip
        run: |
          for f in private cn google netflix twitter telegram; do
            src="meta-rules-dat/geo/geoip/${f}.mrs"
            dst="meta/MetaCubeX/geoip/${f}.mrs"
            if [[ -f "$src" ]]; then
              cp "$src" "$dst"
            else
              echo "${{ env.DATE }}，${f}.mrs（geoip），未拷贝" >> warning.md
              echo "${f}.mrs（geoip），未拷贝" >> new_warning.md
            fi
          done

      - name: Copy mrs from MetaCubeX geosite
        run: |
          for f in category-public-tracker private connectivity-check cn openai category-ai-!cn github twitter youtube apple-cn apple cloudflare-cn google onedrive microsoft category-games telegram netflix bilibili bahamut spotify pixiv gfw geolocation-!cn; do
            src="meta-rules-dat/geo/geosite/${f}.mrs"
            dst="meta/MetaCubeX/geosite/${f}.mrs"
            if [[ -f "$src" ]]; then
              cp "$src" "$dst"
            else
              echo "${{ env.DATE }}，${f}.mrs（geosite），未拷贝" >> warning.md
              echo "${f}.mrs（geosite），未拷贝" >> new_warning.md
            fi
          done

      - name: Copy YAML & list from 666OS/YYDS
        run: |
          for f in XPTV.yaml fix-direct.yaml download.yaml emby.list; do
            src="yyds-repo/mihomo/rules/$f"
            dst="meta/666OS/$f"
            if [[ -f "$src" ]]; then
              cp "$src" "$dst"
            else
              echo "${{ env.DATE }}，$f，未拷贝" >> warning.md
              echo "$f，未拷贝" >> new_warning.md
            fi
          done

      - name: Copy Game_No_Resolve.yaml from blackmatrix7
        run: |
          src="ios_rule_script/rule/Clash/Game/Game_No_Resolve.yaml"
          dst="meta/blackmatrix7/Game_No_Resolve.yaml"
          if [[ -f "$src" ]]; then
            cp "$src" "$dst"
          else
            echo "${{ env.DATE }}，Game_No_Resolve.yaml，未拷贝" >> warning.md
            echo "Game_No_Resolve.yaml，未拷贝" >> new_warning.md
          fi

      - name: Convert and classify rules for Loon
        run: |
          mkdir -p warning
          : > warning/warning.md
          echo "# ⚠️ Warning List" >> warning/warning.md
          echo "" >> warning/warning.md

          find ActionRules -type f -name "*.list" | while read -r file; do
            tmp_file="${file}.tmp"
            changed=0
            while IFS= read -r line || [ -n "$line" ]; do
              trimmed="$(echo "$line" | sed 's/^[[:space:]]*//')"
              if [[ "$trimmed" =~ ^#.*$ || -z "$trimmed" ]]; then
                echo "$line" >> "$tmp_file"
                continue
              fi

              # DOMAIN-REGEX ➜ URL-REGEX
              if [[ "$trimmed" =~ ^DOMAIN-REGEX, ]]; then
                pattern="${trimmed#DOMAIN-REGEX,}"
                echo "URL-REGEX,^https?:\/\/${pattern}" >> "$tmp_file"
                changed=1

              # 允许的规则类型（原样保留）
              elif [[ "$trimmed" =~ ^(DOMAIN|DOMAIN-SUFFIX|DOMAIN-KEYWORD|URL-REGEX|IP-CIDR|GEOIP|FINAL)(,|$) ]]; then
                echo "$line" >> "$tmp_file"

              # 其余未知/不兼容规则 ➜ 记录 warning
              else
                echo "$line" >> "$tmp_file"
                echo "- **文件**: \`$file\`" >> warning/warning.md
                echo "  - 不兼容规则: \`$line\`" >> warning/warning.md
                echo "" >> warning/warning.md
                changed=1
              fi
            done < "$file"

            if [[ "$changed" -eq 1 ]]; then
              mv "$tmp_file" "$file"
              echo "✅ 已处理：$file"
            else
              rm -f "$tmp_file"
            fi
          done

      - name: Commit and push changes
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git add ActionRules meta warning.md || true
          git commit -m "Auto sync and update rule files" || echo "No changes"
          git remote remove origin
          git remote add origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}
          git push origin HEAD:${{ github.ref_name }}

      - name: Telegram Notify if new warnings exist
        if: always()
        run: |
          set -euo pipefail
          if [ -s new_warning.md ]; then
            content=$(grep -v '^[[:space:]]*$' new_warning.md || true)
            if [ -n "$content" ]; then
              text="⚠️ GitHub Action 同步警告：%0A$content"
              curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
                -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
                --data-urlencode "text=$text" || echo "Telegram 发送失败"
            else
              echo "new_warning.md 仅包含空行，跳过通知"
            fi
          else
            echo "new_warning.md 文件为空，跳过通知"
          fi
