name: Sync and Modify IP Lists

on:
  schedule:
    - cron: "0 23 * * *" # 每天 23:00 UTC 运行 (北京时间早上 7:00)
  workflow_dispatch: # 允许手动触发

# 并发控制：确保同一分支的工作流只有一个实例在运行，新的触发会取消旧的
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# 为工作流授予向仓库写入内容的权限
permissions:
  contents: write

jobs:
  update-lists:
    runs-on: ubuntu-latest

    steps:
      # 步骤 1: 检出你自己的仓库
      - name: Checkout your repository
        uses: actions/checkout@v4

      # 步骤 2: 缓存源仓库以加快速度
      - name: Cache source repositories
        uses: actions/cache@v3
        with:
          path: |
            meta-rules-dat
            ios_rule_script
            rules
          key: ${{ runner.os }}-src-repos-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-src-repos-

      # 步骤 3: 设置当前日期环境变量
      - name: Set current date (Beijing Time)
        run: echo "DATE=$(TZ='Asia/Shanghai' date '+%Y年%m月%d日 %H:%M:%S')" >> $GITHUB_ENV
        
      # 步骤 4: 安装必要的依赖
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl

      # 步骤 5: 克隆或更新所有上游源仓库
      - name: Clone or update source repositories
        run: |
          if [ -d "meta-rules-dat" ]; then (cd meta-rules-dat && git pull); else git clone --depth=1 --branch meta https://github.com/MetaCubeX/meta-rules-dat.git; fi
          if [ -d "ios_rule_script" ]; then (cd ios_rule_script && git pull); else git clone --depth=1 --branch master https://github.com/blackmatrix7/ios_rule_script.git; fi
          if [ -d "rules" ]; then (cd rules && git pull); else git clone --depth=1 --branch release https://github.com/666OS/rules.git; fi

      # 步骤 6: 准备目标文件夹
      - name: Prepare folders
        run: |
          mkdir -p meta/MetaCubeX/geoip meta/MetaCubeX/geosite meta/blackmatrix7 meta/666OS/mihomo

      # 步骤 7: 初始化警告日志文件
      - name: Initialize warning files
        run: |
          echo "同步警告记录：" > warning.md
          echo "" > new_warning.md

      # 步骤 8: 从上游仓库复制所有规则文件到你的仓库目录
      - name: Copy geoip files from MetaCubeX
        run: |
          for base in private cn google netflix twitter telegram; do for ext in mrs list yaml; do src="meta-rules-dat/geo/geoip/${base}.${ext}"; dst="meta/MetaCubeX/geoip/${base}.${ext}"; if [[ -f "$src" ]]; then cp "$src" "$dst"; else echo "${{ env.DATE }}，${base}.${ext}（geoip），未拷贝" >> warning.md; echo "${base}.${ext}（geoip），未拷贝" >> new_warning.md; fi; done; done
      - name: Copy geosite files from MetaCubeX
        run: |
          for base in category-public-tracker private connectivity-check cn openai category-ai-!cn github twitter youtube apple-cn apple cloudflare-cn google onedrive microsoft category-games telegram netflix bilibili bahamut spotify pixiv gfw geolocation-!cn; do for ext in mrs list yaml; do src="meta-rules-dat/geo/geosite/${base}.${ext}"; dst="meta/MetaCubeX/geosite/${base}.${ext}"; if [[ -f "$src" ]]; then cp "$src" "$dst"; else echo "${{ env.DATE }}，${base}.${ext}（geosite），未拷贝" >> warning.md; echo "${base}.${ext}（geosite），未拷贝" >> new_warning.md; fi; done; done
      - name: Copy Game_No_Resolve.yaml from blackmatrix7
        run: |
          src="ios_rule_script/rule/Clash/Game/Game_No_Resolve.yaml"; dst="meta/blackmatrix7/Game_No_Resolve.yaml"; if [[ -f "$src" ]]; then cp "$src" "$dst"; else echo "${{ env.DATE }}，Game_No_Resolve.yaml，未拷贝" >> warning.md; echo "Game_No_Resolve.yaml，未拷贝" >> new_warning.md; fi
      - name: Copy mihomo files from 666OS
        run: |
          src_dir="rules/mihomo"; dst_dir="meta/666OS/mihomo"; if [[ -d "$src_dir" ]]; then cp -rf "$src_dir"/. "$dst_dir/"; else echo "${{ env.DATE }}，666OS/rules/mihomo 文件夹，未拷贝" >> warning.md; echo "666OS/rules/mihomo 文件夹，未拷贝" >> new_warning.md; fi

      # [最终修正] 移除清理步骤，并将 git add 改为精确添加
      # - name: Clean up temporary source repositories
      #   run: rm -rf meta-rules-dat ios_rule_script rules

      # 步骤 9: 提交并推送变动
      - name: Commit and push changes
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected. Committing and pushing..."
            # [最终修正] 只添加需要提交的目录和文件
            git add meta warning.md new_warning.md
            git commit -m "自动更新 ${{ env.DATE }}"
            git remote remove origin
            git remote add origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}
            git push origin HEAD:main
          else
            echo "No changes to commit."
          fi

      # 步骤 10: 读取新的警告信息，为发送通知做准备
      - name: Read new warnings for notification
        id: read_warnings
        if: always()
        run: |
          content=$(cat new_warning.md); content="${content//'%'/'%25'}"; content="${content//$'\n'/'%0A'}"; content="${content//$'\r'/'%0D'}"; echo "content=$content" >> $GITHUB_OUTPUT

      # 步骤 11: 如果有新的警告，则发送 Telegram 通知
      - name: Telegram Notify if new warnings exist
        if: always() && steps.read_warnings.outputs.content != ''
        uses: appleboy/telegram-action@v0.1.1
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ⚠️ **GitHub Action 同步警告**
            
            ${{ steps.read_warnings.outputs.content }}
          format: markdown
